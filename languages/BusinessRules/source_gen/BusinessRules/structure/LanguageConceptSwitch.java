package BusinessRules.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Any = 0;
  public static final int Before = 1;
  public static final int Boolean = 2;
  public static final int Comment = 3;
  public static final int Date = 4;
  public static final int DatePicker = 5;
  public static final int ElseStatement = 6;
  public static final int IfStatement = 7;
  public static final int Parameter = 8;
  public static final int ParameterReferenceBoolean = 9;
  public static final int ParameterReferenceDate = 10;
  public static final int Return0Days = 11;
  public static final int Return1Day = 12;
  public static final int Return2Days = 13;
  public static final int Return3Days = 14;
  public static final int Return5Days = 15;
  public static final int ReturnExpression = 16;
  public static final int Rule = 17;
  public static final int Test = 18;
  public static final int TestParameterValue = 19;
  public static final int TestReturnValue = 20;
  public static final int TestValue = 21;
  public static final int TestValueBoolean = 22;
  public static final int TestValueInteger = 23;
  public static final int Type = 24;
  public static final int TypeBoolean = 25;
  public static final int TypeDate = 26;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xb885910aced43e1L, 0x8b6d9840b91c1156L);
    builder.put(0xa41bf13b3c73aa5L, Any);
    builder.put(0xa41bf13b3c73acbL, Before);
    builder.put(0xa41bf13b3c73a07L, Boolean);
    builder.put(0xa41bf13b3c73a1cL, Comment);
    builder.put(0xa41bf13b3c73a1fL, Date);
    builder.put(0xa41bf13b3c73a2aL, DatePicker);
    builder.put(0xa41bf13b3c73b71L, ElseStatement);
    builder.put(0xa41bf13b3c73b44L, IfStatement);
    builder.put(0xa41bf13b3c73ad1L, Parameter);
    builder.put(0xa41bf13b3c73aeaL, ParameterReferenceBoolean);
    builder.put(0xa41bf13b3c73b01L, ParameterReferenceDate);
    builder.put(0xa41bf13b3c73b23L, Return0Days);
    builder.put(0xa41bf13b3c73b2eL, Return1Day);
    builder.put(0xa41bf13b3c73b2fL, Return2Days);
    builder.put(0xa41bf13b3c73b30L, Return3Days);
    builder.put(0xa41bf13b3c73b31L, Return5Days);
    builder.put(0xa41bf13b3c73a37L, ReturnExpression);
    builder.put(0xa41bf13b3c73b74L, Rule);
    builder.put(0xa41bf13b3c73c00L, Test);
    builder.put(0xa41bf13b3c73b09L, TestParameterValue);
    builder.put(0x546a2f1872e9b1b8L, TestReturnValue);
    builder.put(0x546a2f1872ea8e9dL, TestValue);
    builder.put(0x546a2f1872ea8ea8L, TestValueBoolean);
    builder.put(0x546a2f1872ea8eb5L, TestValueInteger);
    builder.put(0xa41bf13b3c73a59L, Type);
    builder.put(0xa41bf13b3c73a64L, TypeBoolean);
    builder.put(0xa41bf13b3c73a7eL, TypeDate);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}

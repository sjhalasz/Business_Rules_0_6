package BusinessRules.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new All_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Any_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Before_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Comment_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Date_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new DatePicker_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new DateX_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Days_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new IfStatement_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new LessThan_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Minus_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new NotLessThan_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Parameter_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new ParameterReferenceBoolean_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new ParameterReferenceDate_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new ParameterReferenceInteger_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new ReturnMultiple_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new Rule_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new Status_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new Test_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new TestParameterValue_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new ValueBoolean_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new ValueMultiple_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new ParameterReferenceBoolean_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new ParameterReferenceDate_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new ParameterReferenceInteger_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0x546a2f18730146ecL), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73aa5L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73acbL), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73a1cL), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73a7eL), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73a2aL), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73a1fL), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0x546a2f1872ea8eb5L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73b44L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0x546a2f1872ff68a3L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0x42575fae37fe2434L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0x546a2f1873015beeL), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73ad1L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73aeaL), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73b01L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0x546a2f1873003de2L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0x546a2f187303504bL), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73b74L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73a64L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73c00L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73b09L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0x546a2f1872ea8ea8L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0x42575fae380a4e1dL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73aeaL), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0xa41bf13b3c73b01L), MetaIdFactory.conceptId(0xb885910aced43e1L, 0x8b6d9840b91c1156L, 0x546a2f1873003de2L)).seal();
}
